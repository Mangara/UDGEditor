package grapheditor.gui;

import graphs.graph.Graph;
import graphs.graph.GraphReader;
import graphs.graph.GraphWriter;
import graphs.ipe.IPEExporter;
import graphs.ipe.IPEImporter;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Sander Verdonschot <sander.verdonschot at gmail.com>
 */
public class MainFrame extends javax.swing.JFrame {

    private final GraphDrawPanel drawPanel;
    private final JFileChooser openFileChooser;
    private final JFileChooser saveFileChooser;
    private final String myExtension = "grp";
    private final FileNameExtensionFilter myFilter = new FileNameExtensionFilter("Graphs", myExtension);
    private final String ipeExtension = "ipe";
    private final FileNameExtensionFilter ipeFilter = new FileNameExtensionFilter("IPE XML", ipeExtension);
    private final FileNameExtensionFilter ipe6Filter = new FileNameExtensionFilter("IPE 6 XML", ipeExtension);
    private final FileNameExtensionFilter ipe7Filter = new FileNameExtensionFilter("IPE 7 XML", ipeExtension);
    private final IPEImporter ipeImporter = new IPEImporter();
    private final IPEExporter ipeExporter = new IPEExporter();

    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();

        drawPanel = new GraphDrawPanel();
        drawPanel.setPreferredSize(new Dimension(1200, 600));
        centerPanel.add(drawPanel, BorderLayout.CENTER);

        // Initialize the file choosers
        openFileChooser = new JFileChooser(System.getProperty("user.dir"));
        openFileChooser.addChoosableFileFilter(myFilter);
        openFileChooser.addChoosableFileFilter(ipeFilter);
        saveFileChooser = new JFileChooser(System.getProperty("user.dir"));
        saveFileChooser.addChoosableFileFilter(myFilter);
        saveFileChooser.addChoosableFileFilter(ipe6Filter);
        saveFileChooser.addChoosableFileFilter(ipe7Filter);
        saveFileChooser.setFileFilter(myFilter);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        centerPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        radiusSlider = new javax.swing.JSlider();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        highlightFreeCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Graph Editor");

        centerPanel.setPreferredSize(new java.awt.Dimension(800, 600));
        centerPanel.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Radius");
        jPanel1.add(jLabel1);

        radiusSlider.setMaximum(1000);
        radiusSlider.setMinimum(1);
        radiusSlider.setValue(500);
        radiusSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radiusSliderStateChanged(evt);
            }
        });
        jPanel1.add(radiusSlider);

        centerPanel.add(jPanel1, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setText("New");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open...");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText("Save...");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        menuBar.add(fileMenu);

        viewMenu.setText("View");

        highlightFreeCheckBoxMenuItem.setSelected(true);
        highlightFreeCheckBoxMenuItem.setText("Highlight Uncrossed Edges");
        highlightFreeCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highlightFreeCheckBoxMenuItemActionPerformed(evt);
            }
        });
        viewMenu.add(highlightFreeCheckBoxMenuItem);

        menuBar.add(viewMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        int opened = openFileChooser.showOpenDialog(this);

        if (opened == JFileChooser.APPROVE_OPTION) {
            try {
                File selectedFile = openFileChooser.getSelectedFile();

                Graph graph = null;

                if (openFileChooser.getFileFilter() == myFilter) {
                    graph = GraphReader.readGraph(selectedFile);
                } else if (openFileChooser.getFileFilter() == ipeFilter) {
                    graph = ipeImporter.importGraph(selectedFile);
                } else {
                    if (selectedFile.getName().contains("." + myExtension)) {
                        graph = GraphReader.readGraph(selectedFile);
                    } else if (selectedFile.getName().contains("." + ipeExtension)) {
                        graph = ipeImporter.importGraph(selectedFile);
                    } else {
                        throw new IOException("Unknown file type.");
                    }
                }

                drawPanel.setGraph(graph);

                saveFileChooser.setCurrentDirectory(selectedFile);
            } catch (IOException ioe) {
                // Nice error
                ioe.printStackTrace();
                JOptionPane.showMessageDialog(this,
                        "An error occurred while loading the data:\n" +
                        ioe.getMessage(),
                        "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        int saved = saveFileChooser.showSaveDialog(this);

        if (saved == JFileChooser.APPROVE_OPTION) {
            try {
                File selectedFile = saveFileChooser.getSelectedFile();

                String saveType = null;

                // Determine the save type
                if (saveFileChooser.getFileFilter() == myFilter) {
                    saveType = "Graph";
                } else if (saveFileChooser.getFileFilter() == ipe6Filter) {
                    saveType = "IPE6";
                } else if (saveFileChooser.getFileFilter() == ipe7Filter) {
                    saveType = "IPE7";
                } else if (selectedFile.getName().contains("." + ipeExtension)) {
                    saveType = "IPE7";
                } else {
                    saveType = "Graph";
                }

                // Add an extension if that wasn't done already and save the current graph in the correct format
                if ("Graph".equals(saveType)) {
                    if (!selectedFile.getName().contains("." + myExtension)) {
                        selectedFile = new File(selectedFile.getParent(), selectedFile.getName() + "." + myExtension);
                    }

                    GraphWriter.writeGraph(selectedFile, drawPanel.getGraph());
                } else if ("IPE7".equals(saveType)) {
                    if (!selectedFile.getName().contains("." + ipeExtension)) {
                        selectedFile = new File(selectedFile.getParent(), selectedFile.getName() + "." + ipeExtension);
                    }

                    ipeExporter.exportGraph(selectedFile, drawPanel.getGraph(), false);
                } else if ("IPE6".equals(saveType)) {
                    if (!selectedFile.getName().contains("." + ipeExtension)) {
                        selectedFile = new File(selectedFile.getParent(), selectedFile.getName() + "." + ipeExtension);
                    }

                    ipeExporter.exportGraph(selectedFile, drawPanel.getGraph(), true);
                } else {
                    throw new IOException("Invalid save type!");
                }

                openFileChooser.setCurrentDirectory(selectedFile);
            } catch (IOException ioe) {
                // Nice error
                ioe.printStackTrace();
                JOptionPane.showMessageDialog(this,
                        "An error occurred while saving the data:\n" +
                        ioe.getMessage(),
                        "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        drawPanel.setGraph(new Graph());
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void radiusSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radiusSliderStateChanged
        drawPanel.setRadius(radiusSlider.getValue() / 500.0);
    }//GEN-LAST:event_radiusSliderStateChanged

    private void highlightFreeCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highlightFreeCheckBoxMenuItemActionPerformed
        drawPanel.setHighlightFreeEdges(highlightFreeCheckBoxMenuItem.isSelected());
    }//GEN-LAST:event_highlightFreeCheckBoxMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel centerPanel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JCheckBoxMenuItem highlightFreeCheckBoxMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JSlider radiusSlider;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables
}
